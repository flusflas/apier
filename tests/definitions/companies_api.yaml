openapi: 3.0.3
info:
  title: Company Maker API
  description: An OpenAPI definition for testing.
  version: 1.0.0
  x-apier:
    equivalent_paths:
      - source: /companies/{company_id}/departments/{department-name}/employees/{employee-num}
        target: /companies/{company_id}/employees/{employee-num}
    templates:
      python-tree:
        raise-response-errors: true
servers:
  - url: 'https://company-maker.test'
    description: Testing server
tags:
  - name: Companies
    description: Companies API
  - name: Employees
    description: Employees API
paths:
  /companies:
    post:
      tags:
        - Companies
      summary: Create a new Company
      description: Creates a new Company and expands your capitalist empire.
      operationId: CreateCompany
      x-apier:
        method-name:
          default: create company
          templates:
            python-tree: create
            go: Create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyCreate'
          application/xml:
            schema:
              $ref: '#/components/schemas/CompanyCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CompanyCreate'
      responses:
        default:
          $ref: '#/components/responses/Unexpected'

        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - Companies
      summary: List Companies
      description: Returns all your companies.
      parameters:
        - in: query
          description: Filters companies by name.
          name: name
          required: false
          schema:
            type: string
            example: Stickers
      operationId: ListCompanies
      x-apier:
        method-name:
          default: list companies
          templates:
            go: List
        pagination:
          next:
            reuse_previous_request: true
            modifiers:
              - param: "$request.query.next_cursor"
                value: "$response.body#/cursors/next"
            result: "results"
            has_more: "$response.body#/cursors/next"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyList'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /companies/{company_id}:
    parameters:
      - $ref: '#/components/parameters/company_id'

    get:
      parameters:
        - $ref: '#/components/parameters/company_id'
      tags:
        - Companies
      summary: Get a Company
      description: Returns a company by its ID.
      operationId: GetCompany
      x-apier:
        method-name:
          templates:
            go: Get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Companies
      summary: Update Company
      operationId: UpdateCompany
      description: Updates an exising company.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyUpdate'
            example:
              name: Shiny Stickers Corporation
              category: stickers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
              example:
                id: shiny_stickers
                name: Shiny Stickers Corporation
                category: stickers
                created: "2023-06-19T21:00:00Z"
                modified: "2023-06-19T21:30:00Z"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      tags:
        - Companies
      summary: Patch a Company
      operationId: PatchCompany
      description: Patches an existing company.
      requestBody:
        required: true
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                type: object
                required:
                  - op
                  - path
                properties:
                  op:
                    type: string
                    enum: [ add, remove, replace, move, copy, test ]
                  path:
                    type: string
                    description: "The path to the property to modify, e.g. '/name'."
                  value:
                    description: "The value to apply in operations like add/replace/test."
                  from:
                    type: string
                    description: "Used with 'move' and 'copy' operations."
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


    delete:
      tags:
        - Companies
      summary: Delete a Company
      operationId: DeleteCompany
      description: Deletes a company :(
      responses:
        '204':
          description: No content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /companies/{company_id}/{number}:
    parameters:
      - $ref: '#/components/parameters/company_id'

    get:
      parameters:
        - $ref: '#/components/parameters/company_id'
        - in: path
          name: number
          required: true
          schema:
            type: integer
            example: 1
      tags:
        - Companies
      summary: Get a Company with its ID and some number
      description: An endpoint used to test multiple path parameters in the same layer.
      operationId: GetCompanyWithNumber
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
            application/xml:
              schema:
                $ref: '#/components/schemas/Company'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /companies/{company_id}/employees:
    parameters:
      - $ref: '#/components/parameters/company_id'
    post:
      tags:
        - Employees
      summary: Hire an Employee
      description: Hires a new employee!
      operationId: CreateEmployee
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - Employees
      summary: List Employees
      description: Returns all your employees.
      operationId: ListEmployees
      x-apier:
        pagination:
          next:
            reuse_previous_request: true
            modifiers:
              - param: "$request.query.next_cursor"
                value: "$response.body#/cursors/next"
            result: "results"
            has_more: "$response.body#/cursors/next"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /companies/{company_id}/employees/{employee-num}:
    get:
      parameters:
        - $ref: '#/components/parameters/company_id'
        - $ref: '#/components/parameters/employee-num'
      tags:
        - Employees
      summary: Get a Employee
      description: Returns one of your company employees
      operationId: GetEmployee
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /companies/{company_id}/departments/{department-name}/employees/{employee-num}:
    get:
      parameters:
        - $ref: '#/components/parameters/company_id'
        - $ref: '#/components/parameters/department-name'
        - $ref: '#/components/parameters/employee-num'
      tags:
        - Employees
      summary: Get a Employee by department
      description: Returns one of your company employees by a department
      operationId: GetEmployeeByDepartment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tests/{company_id}/employees:
    post:
      tags:
        - Tests
      summary: Create an employee with custom parameters and body
      description: Compounds the request using custom parameters
      operationId: TestCreateCustom
      parameters:
        - $ref: '#/components/parameters/company_id'
      x-apier:
        input-parameters:
          parameters:
            - name: employee_id
              description: ID of the employee.
              schema:
                type: integer
            - name: employee_name
              schema:
                type: string
            - name: extra_info
          payload: '{"number": {{employee_id}}, "name": "{{employee_name}}", "{{employee_name}}": "{{ company_id }}", "extra": {{extra_info | json}}}'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tests/echo_string:
    post:
      tags:
        - Tests
      summary: Get a text response
      description: Returns a text response (string)
      operationId: GetTextResponse
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string

  /tests/echo_bool:
    get:
      tags:
        - Tests
      summary: Get a boolean response
      description: Returns a boolean response
      operationId: GetBooleanResponse
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: boolean

  /tests/echo_object:
    get:
      tags:
        - Tests
      summary: Get an object response
      description: Returns an object response
      operationId: GetObjectResponse
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true

  /tests/echo-array:
    get:
      tags:
        - Tests
      summary: Get an array response
      description: Returns an array response
      operationId: GetArrayResponse
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer

  /tests/tests:
    get:
      tags:
        - Tests
      summary: Endpoint with duplicated layer names
      description: Endpoint with duplicated layer names
      operationId: GetTestTest
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object

  /tests/oneOf:
    post:
      tags:
        - Tests
      summary: Send request with multiple possible schemas
      description: Send request with multiple possible schemas
      operationId: PostTestsOneOf
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Company'
                - $ref: '#/components/schemas/Employee'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string

  /tests/echo_xml:
    post:
      tags:
        - Tests
      summary: Send an XML request and receive an XML response
      description: Returns an XML response
      operationId: GetXMLResponse
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Company'
      responses:
        '200':
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Company'

components:
  securitySchemes:
    BasicAuthentication:
      type: http
      scheme: basic
      description: "Use basic authentication."
    BearerToken:
      type: http
      scheme: bearer
      description: "Use an already exchanged bearer token."
    OAuth2ClientCredentials:
      type: oauth2
      description: "Use OAuth2 Client Credentials flow."
      flows:
        clientCredentials:
          tokenUrl: /token
          scopes:
            foo: Foo scope
            bar: Bar scope
    OAuth2AuthorizationCode:
      type: oauth2
      description: "Use OAuth2 Authorization Code flow."
      flows:
        authorizationCode:
          authorizationUrl: /auth
          tokenUrl: /token
          scopes:
            foo: Foo scope
            bar: Bar scope

  parameters:
    company_id:
      in: path
      name: company_id
      description: Company!!!
      required: true
      schema:
        type: string
        example: mcdonalds

    employee-num:
      in: path
      name: employee-num
      required: true
      schema:
        type: integer
        example: 17

    department-name:
      in: path
      name: department-name
      required: true
      schema:
        type: string
        example: accounting

  responses:
    Unexpected:
      description: Unexpected error
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/AnyValue'

  schemas:
    AnyValue:
      nullable: true
      description: "Can be any value - string, number, boolean, array, object or null."

    ErrorResponse:
      title: Error Response
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: Oh, no!

    CompanyBase:
      title: Company Base
      type: object
      properties:
        id:
          type: string
          example: shiny_stickers
          description: ID of the Company.
        name:
          type: string
          example: Shiny Stickers
          description: Name of the Company.
        category:
          type: string
          enum:
            - food
            - clothing
            - technology
            - evil
            - stickers
          example: stickers

    CompanyCreate:
      title: Company Creation Request
      type: object
      allOf:
        - $ref: '#/components/schemas/CompanyBase'

    CompanyUpdate:
      title: Company Update Request
      type: object
      allOf:
        - $ref: '#/components/schemas/CompanyBase'

    Company:
      title: Company
      type: object
      allOf:
        - $ref: '#/components/schemas/CompanyBase'
        - type: object
          properties:
            created:
              type: string
              format: date-time
              example: "2023-06-19T21:00:00Z"
            modified:
              type: string
              format: date-time
              example: "2023-06-19T21:00:00Z"

    CompanyList:
      title: Company List
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Company'
        cursors:
          type: object
          properties:
            next:
              type: string
              nullable: true
              example: ''
            previous:
              type: string
              nullable: true
              example: ''
      example:
        results:
          - id: shiny_stickers
            name: Shiny Stickers Corporation
            category: stickers
            created: "2023-06-19T21:00:00Z"
            modified: "2023-06-19T21:30:00Z"
          - id: happy_pharma
            name: Happy Pharmaceutical Corp.
            category: evil
            created: "2017-10-08T10:30:00Z"
            modified: "2021-08-30T12:15:00Z"
        cursors:
          next: null
          previous: null

    EmployeeBase:
      title: Employee Base
      type: object
      properties:
        number:
          type: integer
          example: 17
          description: ID number of the employee.
        name:
          type: string
          example: Billy
          description: Name of the employee.

    EmployeeCreate:
      title: Employee Create Request
      type: object
      allOf:
        - $ref: '#/components/schemas/EmployeeBase'

    Employee:
      title: Employee
      type: object
      allOf:
        - $ref: '#/components/schemas/EmployeeBase'

    EmployeeList:
      title: Employee List
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Employee'
        cursors:
          type: object
          properties:
            next:
              type: string
              nullable: true
              example: ''
            previous:
              type: string
              nullable: true
              example: ''
