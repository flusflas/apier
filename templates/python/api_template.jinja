import json

import requests
from pydantic import BaseModel

{% for branch in root_branches -%}
    from .{{ branch.api }} import _{{ branch.api.capitalize() }}Method
{% endfor %}


class API(
    {%- for branch in root_branches -%}
        _{{ branch.api.capitalize() }}Method
        {%- if not loop.last %}, {% endif %}
    {%- endfor %}):
    """
    The top-level class used as an abstraction of the {{ openapi.info.title }}.
    """

    def __init__(self, host: str{% if server_url %} = "{{ server_url }}"{% endif %}):
        """
        Creates a new API instance.

        :param host: (optional) Host name of the {{ openapi.info.title }}.
        """
        if not host.startswith("http://") and not host.startswith("https://"):
            host = "https://" + host

        self.host = host
        self.headers = {}
        self._raise_errors = {{ raise_errors }}

    def make_request(self, method: str, url: str, body=None, params=None,
                     headers: dict = None, timeout: float = 3) -> requests.Response:
        """
        Makes a request to the API server.

        :param method: HTTP request method used (`GET`, `OPTIONS`, `HEAD`,
            `POST`, `PUT`, `PATCH`, or `DELETE`).
        :param url: Request URL. It can be a relative path or a full URL (the
            host used must be the same as the host in this :class:`API` instance).
        :param body: (optional) Dictionary, list of tuples, bytes, or file-like
            object to send in the body of the request.
        :param params: (optional) Dictionary, list of tuples or bytes to send
            in the query string for the :class:`Request`.
        :param headers: (optional) Dictionary of HTTP headers to send.
        :param timeout: (optional) How many seconds to wait for the server to
            send data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) <timeouts>` tuple.
        :return: An instance of :class:`request.Response`.
        """
        if headers is None:
            headers = {}

        headers.update(self.headers)

        # TODO: Handle request Content-Type
        if isinstance(body, dict):
            headers['Content-Type'] = 'application/json'
            body = json.dumps(body)
        elif isinstance(body, BaseModel):
            headers['Content-Type'] = 'application/json'
            body = body.json()

        return requests.request(method, self.host + url, params=params,
                                headers=headers, data=body, timeout=timeout)
